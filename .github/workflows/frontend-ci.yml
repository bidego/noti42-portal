name: Frontend CI/CD

on:
#  push:
#    branches:
#      - main
#      - master
#    paths:
#      - 'frontend/**'
#      - 'bff/**'
  push:
      tags:
        - 'v*.*.*'
  workflow_dispatch: 

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.set.outputs.frontend }}
      bff: ${{ steps.set.outputs.bff }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necesario para diff entre commits/tags
      - id: set
        run: |
          LAST_COMMIT=$(git rev-parse HEAD)
          PREV_COMMIT=$(git rev-list --tags --skip=1 --max-count=1)

          echo "Last tag commit: $LAST_COMMIT"
          echo "Previous tag commit: $PREV_COMMIT"

          CHANGED=$(git diff --name-only $PREV_COMMIT $LAST_COMMIT || true)

          echo "$CHANGED"

          if echo "$CHANGED" | grep -q "^frontend/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED" | grep -q "^bff/"; then
            echo "bff=true" >> $GITHUB_OUTPUT
          else
            echo "bff=false" >> $GITHUB_OUTPUT
          fi

  build-bff:
    needs: detect-changes
    if: needs.detect-changes.outputs.bff == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Configure GCP credentials
      # This step requires GCP authentication.
      # You'll need to set up Workload Identity Federation or use a service account key.
      # Example using service account key (NOT recommended for production):
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}


  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    environment: prod
    defaults:
      run:
        working-directory: ./

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      run: cd frontend && npm install

    - name: Build frontend
      env:
        VITE_GA_MEASUREMENT_ID: ${{ vars.VITE_GA_MEASUREMENT_ID }}
      run: |
        cd frontend && npm run build
        mkdir ../bff/dist && mkdir ../bff/dist/public  
        cp -r dist/* ../bff/dist/public/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: bff/dist/public/

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    environment: prod
    defaults:
      run:
        working-directory: ./

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: bff/dist/public/

    - name: Configure GCP credentials
      # This step requires GCP authentication.
      # You'll need to set up Workload Identity Federation or use a service account key.
      # Example using service account key (NOT recommended for production):
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Deploy frontend to VM
      # This step mirrors the 'deploy-frontend' target from your Makefile.
      # It requires VM_NAME, ZONE, and CONTAINER_ID to be set as environment variables or GitHub Secrets.
      # FILES_PATH is handled by downloading the artifact.
      run: |
        echo "Deploying frontend to GCP VM..."
        # Ensure VM_NAME, ZONE, and CONTAINER_ID are set as GitHub Secrets or environment variables
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command="mkdir -p /tmp/frontend_dist"
        gcloud compute scp --recurse bff/dist/public/* ${{ env.VM_NAME }}:/tmp/frontend_dist --zone=${{ env.ZONE }}
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command="docker cp /tmp/frontend_dist/. ${{ env.CONTAINER_ID }}:/app/bff/dist/public && rm -rf /tmp/frontend_dist"
      env:
        VM_NAME: ${{ vars.VM_NAME }}
        ZONE: ${{ vars.ZONE }}
        CONTAINER_ID: ${{ vars.CONTAINER_ID }}
